{"version":3,"sources":["utils/set-utils.tsx","card/Card.tsx","utils/game-utils.ts","game/RulesPopup.tsx","game/Game.tsx","App.tsx","serviceWorker.js","index.js"],"names":["COLORS","SHAPE","STYLE","Card","card","isSelected","onSelect","isAutomaticAction","className","join","onClick","elements","i","amount","color","shape","style","toLowerCase","push","key","getElements","generateAllCards","cards","addType","BLUE","RED","GREEN","SQUARE","CIRCLE","ROMB","EMPTY","FILL","STRIPE","sort","Math","random","checkIfSet","canMakeSetByType","qualityName","q","map","uniq","Set","size","length","qualityValues","value","flat","Infinity","GameUtils","allCards","playedCards","cardsOnTable","nextSet","this","splice","recalculateNextSet","startGame","selectedCards","forEach","selectedIndex","anyCardsLeft","drawCards","j","k","findSet","console","log","RulesPopup","isModalVisible","setIsModalVisible","visible","width","height","effect","onClickAway","href","target","rel","Game","useState","currentCards","setCurrentCards","selectedCardIndexes","setSelectedCardIndexes","gameOver","setGameOver","isUserActionLast","setIsUserActionLast","useEffect","restartGame","cardIndex","setTimeout","removeSelectedCards","drawMoreCards","setCards","item","index","indexOf","newStatus","filter","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d6fbedb8.chunk.js","sourcesContent":["export enum COLORS {RED = 'RED', GREEN = 'GREEN', BLUE = 'BLUE'}\nexport enum SHAPE {CIRCLE = 'CIRCLE', SQUARE = 'SQUARE', ROMB = 'ROMB'}\nexport enum STYLE {EMPTY = 'EMPTY', FILL = 'FILL', STRIPE = 'STRIPE'}\n\nexport interface ICard {\n  amount: number\n  color: string\n  shape: string\n  style: string\n}\n\nexport function generateAllCards(): ICard[] {\n  let cards = [{}]\n  const AMOUNT = [1, 2, 3]\n\n  cards = addType(cards, 'amount', AMOUNT)\n  cards = addType(cards, 'color', [COLORS.BLUE, COLORS.RED, COLORS.GREEN])\n  cards = addType(cards, 'shape', [SHAPE.SQUARE, SHAPE.CIRCLE, SHAPE.ROMB])\n  cards = addType(cards, 'style', [STYLE.EMPTY, STYLE.FILL, STYLE.STRIPE])\n  return shuffle(cards) as ICard[]\n}\n\nexport function checkIfSet(cards: ICard[]): boolean {\n  return canMakeSetByType(cards, 'amount') &&\n    canMakeSetByType(cards, 'color') &&\n    canMakeSetByType(cards, 'shape') &&\n    canMakeSetByType(cards, 'style')\n}\n\nfunction canMakeSetByType(cards: ICard[], qualityName: string): boolean {\n  const q: any[] = cards.map(card => (card as any)[qualityName])\n  const uniq = new Set(q)\n  return uniq.size === 1 || uniq.size === cards.length\n}\n\nexport function findSet(cards: ICard[]): number[] {\n  for (let i = 0; i < cards.length; i++) {\n    for (let j = i + 1; j < cards.length; j++) {\n      for (let k = j + 1; k < cards.length; k++) {\n        if (checkIfSet([cards[i], cards[j], cards[k]])) {\n          return [i, j, k]\n        }\n      }\n    }\n  }\n  return []\n}\n\nfunction shuffle(array: any[]): any[] {\n  return array.sort(() => Math.random() - 0.5)\n}\n\nfunction addType(cards: any[], qualityName: string, qualityValues: any[]) {\n  return cards.map(card => {\n    return qualityValues.map(value => ({ ...card, ...{ [qualityName]: value } }))\n  }).flat(Infinity)\n}\n\n","import React from 'react'\nimport './Card.scss'\nimport { ICard } from '../utils/set-utils'\n\nexport interface ICardProps {\n  card: ICard,\n  isSelected: boolean,\n  onSelect: (p: boolean) => void\n  isAutomaticAction: boolean\n}\n\nexport const Card = ({ card, isSelected, onSelect, isAutomaticAction }: ICardProps) => {\n\n  const getElements = () => {\n    let elements = []\n    for (let i = 0; i < card.amount; i++) {\n      const className = ['item', card.color, card.shape, card.style].join(' ').toLowerCase()\n      elements.push(<div className={className} key={className + i}></div>)\n    }\n    return elements\n  }\n\n  const className = ['card ', (isSelected ? 'selected' : ''), (isSelected && isAutomaticAction ? 'selected-auto': '')].join(' ')\n\n  return (\n    <div className={className} onClick={() => onSelect(!isSelected)}>\n    {getElements()}\n  </div>)\n}\n","import { findSet, generateAllCards, ICard } from './set-utils'\n\nexport const SET_SIZE = 3\nexport const MIN_BOARD_SIZE = 12\nclass Game {\n  allCards: ICard[] = []\n  playedCards: ICard[] = []\n  cardsOnTable: ICard[] = []\n\n  nextSet: number[] = []\n\n  startGame() {\n    this.allCards = generateAllCards()\n    this.cardsOnTable = this.allCards.splice(0, MIN_BOARD_SIZE)\n\n    this.recalculateNextSet()\n\n    if (this.nextSet.length === 0) {\n      this.startGame()\n    }\n  }\n\n  get anyCardsLeft(): boolean {\n    return this.allCards.length > 0\n  }\n\n  removeSelectedCards(selectedCards: number[]) {\n    selectedCards.forEach((selectedIndex, i) => {\n      this.playedCards.push(this.cardsOnTable[selectedIndex - i])\n      this.cardsOnTable.splice(selectedIndex - i,1)\n    })\n\n    this.recalculateNextSet()\n  }\n\n  drawMoreCards() {\n    if (!this.anyCardsLeft) {\n      return\n    }\n    if (this.cardsOnTable.length < MIN_BOARD_SIZE) {\n      this.drawCards(3)\n    }\n\n    while (this.nextSet.length === 0 && this.anyCardsLeft) {\n      this.drawCards(1)\n    }\n  }\n\n  private drawCards(amount = 1) {\n    this.cardsOnTable.push(...this.allCards.splice(0, amount))\n    this.recalculateNextSet()\n  }\n\n  private recalculateNextSet() {\n    this.nextSet = findSet(this.cardsOnTable)\n    console.log(this.nextSet)\n\n  }\n}\n\nexport const GameUtils = new Game()","import Modal from 'react-awesome-modal'\nimport React from 'react'\nimport './RulesPopup.scss'\nexport const RulesPopup = ({ isModalVisible, setIsModalVisible }: any) => {\n  return (<Modal visible={isModalVisible}\n                 width=\"400\" height=\"300\" effect=\"fadeInDown\"\n                 onClickAway={() => setIsModalVisible(false)}>\n    <div className=\"popup\">\n      <h1>How to play</h1>\n      <p>This is an online version of SET game</p>\n      <p>You can find official rules <a href=\"https://www.ultraboardgames.com/set/game-rules.php\" target=\"_blank\" rel=\"noopener noreferrer\"> here</a></p>\n      <span className=\"close\" onClick={() => setIsModalVisible(false)}>X</span>\n    </div>\n  </Modal>)\n}","import React, { useEffect, useState } from 'react'\nimport { Card } from '../card/Card'\nimport './Game.scss'\nimport { checkIfSet, ICard } from '../utils/set-utils'\nimport { GameUtils, SET_SIZE } from '../utils/game-utils'\nimport { RulesPopup } from './RulesPopup'\n\nconst TIMEOUT = 500\n\nexport const Game = () => {\n  const [currentCards, setCurrentCards] = useState<ICard[]>([])\n  const [selectedCardIndexes, setSelectedCardIndexes] = useState<number[]>([])\n  const [gameOver, setGameOver] = useState<boolean>(false)\n  const [isModalVisible, setIsModalVisible] = useState<boolean>(false)\n  const [isUserActionLast, setIsUserActionLast] = useState<boolean>(false)\n\n  useEffect(() => {restartGame()}, [])\n\n  useEffect(() => {\n    const handleSet = () => {\n      GameUtils.removeSelectedCards(selectedCardIndexes)\n      setSelectedCardIndexes([])\n\n      setTimeout(() => {\n        GameUtils.drawMoreCards()\n        setCurrentCards([...GameUtils.cardsOnTable])\n      }, TIMEOUT)\n    }\n\n    if (isUserActionLast && selectedCardIndexes.length === SET_SIZE) {\n      const selectedCards = selectedCardIndexes.map(cardIndex => currentCards[cardIndex])\n      const isSet = checkIfSet(selectedCards)\n\n      if (isSet) {\n        setTimeout(() => {handleSet()}, TIMEOUT)\n      } else {\n        setTimeout(() => {setSelectedCardIndexes([])}, TIMEOUT)\n      }\n    }\n  }, [selectedCardIndexes, currentCards, isUserActionLast])\n\n  useEffect(() => {\n    setGameOver(GameUtils.nextSet.length === 0)\n  }, [currentCards])\n\n  const onCardSelect = (isSelected: boolean, cardIndex: number) => {\n    setIsUserActionLast(true)\n\n    if (!isUserActionLast) {\n      setSelectedCardIndexes([cardIndex])\n      return\n    }\n\n    if (selectedCardIndexes.indexOf(cardIndex) === -1 && isSelected) {\n      setSelectedCardIndexes([...selectedCardIndexes, cardIndex])\n      return\n    }\n    setSelectedCardIndexes(selectedCardIndexes.filter(index => index !== cardIndex))\n\n  }\n\n  const highlightSetAutomatically = () => {\n    setIsUserActionLast(false)\n    const setCards = GameUtils.nextSet\n    if (setCards.length) {\n      setSelectedCardIndexes(setCards)\n    }\n  }\n\n  const restartGame = () => {\n    GameUtils.startGame()\n    setCurrentCards(GameUtils.cardsOnTable)\n  }\n\n  const renderBoard = () => {\n    return currentCards.map((item, index) =>\n      <Card key={index}\n            card={item}\n            isSelected={selectedCardIndexes.indexOf(index) > -1}\n            isAutomaticAction={!isUserActionLast}\n            onSelect={(newStatus) => onCardSelect(newStatus, index)}/>)\n  }\n\n  return (\n    <div className=\"game\">\n      <div className=\"header\">\n        <h1>Set game</h1>\n        <div className=\"btn-container\">\n          <div className=\"info\">Cards left: {GameUtils.allCards.length}</div>\n          <button className=\"btn\" onClick={() => setIsModalVisible(true)}>HOW TO</button>\n          {!gameOver && <button onClick={highlightSetAutomatically} className=\"btn\">HELP ME!</button>}\n          {gameOver && <button onClick={restartGame} className=\"btn\">RESTART</button>}\n        </div>\n      </div>\n      <div className=\"cards-container\">\n        {renderBoard()}\n        {gameOver && (<div className=\"gameOver\">\n          <div className=\"stamp\">\n            Game over\n          </div>\n        </div>)}\n      </div>\n      <RulesPopup isModalVisible={isModalVisible} setIsModalVisible={setIsModalVisible}/>\n\n    </div>\n  )\n}\n","import React from 'react'\nimport './App.scss'\nimport { Game } from './game/Game'\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n    <Game/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}