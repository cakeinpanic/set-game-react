{"version":3,"sources":["utils/set-utils.tsx","card/Card.tsx","utils/game-utils.ts","game/RulesPopup.tsx","game/Game.tsx","App.tsx","serviceWorker.js","index.js"],"names":["COLORS","SHAPE","STYLE","Card","style","isRemoving","card","isSelected","onSelect","isHighlighted","className","join","onClick","elements","i","amount","color","shape","toLowerCase","push","key","getElements","generateAllCards","cards","addType","BLUE","RED","GREEN","SQUARE","CIRCLE","ROMB","EMPTY","FILL","STRIPE","sort","Math","random","checkIfSet","length","canMakeSetByType","qualityName","q","map","uniq","Set","size","qualityValues","value","flat","Infinity","GameUtils","allCards","playedCards","cardsOnTable","nextSet","this","splice","recalculateNextSet","startGame","selectedCards","removeSelectedCards","replaceRemovedCardsWithNew","forEach","selectedIndex","anyCardsLeft","MIN_BOARD_SIZE","drawCards","filter","newCard","indexToReplace","indexOf","j","k","findSet","console","log","RulesPopup","isModalVisible","setIsModalVisible","visible","width","height","effect","onClickAway","href","target","rel","Game","useState","currentCards","setCurrentCards","gameOver","setGameOver","hintRemovingTimeout","useRef","useEffect","restartGame","clearTimeout","current","cardItem","isSet","item","setTimeout","selectedCardsIndexes","replaceSelectedCards","isHinted","isAppearing","setCards","updatedCards","shiftX","CARD_WIDTH","index","divStyle","top","floor","left","newStatus","cardIndex","onCardSelect","renderBoard","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.11dc6d92.chunk.js","sourcesContent":["import { CardItem } from './game-utils'\n\nexport enum COLORS {RED = 'RED', GREEN = 'GREEN', BLUE = 'BLUE'}\nexport enum SHAPE {CIRCLE = 'CIRCLE', SQUARE = 'SQUARE', ROMB = 'ROMB'}\nexport enum STYLE {EMPTY = 'EMPTY', FILL = 'FILL', STRIPE = 'STRIPE'}\n\nexport interface ICard {\n  amount: number\n  color: string\n  shape: string\n  style: string\n}\n\nexport function generateAllCards(): ICard[] {\n  let cards = [{}]\n  const AMOUNT = [1, 2, 3]\n\n  cards = addType(cards, 'amount', AMOUNT)\n  cards = addType(cards, 'color', [COLORS.BLUE, COLORS.RED, COLORS.GREEN])\n  cards = addType(cards, 'shape', [SHAPE.SQUARE, SHAPE.CIRCLE, SHAPE.ROMB])\n  cards = addType(cards, 'style', [STYLE.EMPTY, STYLE.FILL, STYLE.STRIPE])\n  return shuffle(cards) as ICard[]\n}\n\nexport function checkIfSet(cards: CardItem[]): boolean {\n  return cards.length === 3 &&\n    canMakeSetByType(cards, 'amount') &&\n    canMakeSetByType(cards, 'color') &&\n    canMakeSetByType(cards, 'shape') &&\n    canMakeSetByType(cards, 'style')\n}\n\nfunction canMakeSetByType(cards: CardItem[], qualityName: string): boolean {\n  const q: any[] = cards.map(card => card && (card as any)[qualityName])\n  const uniq = new Set(q)\n  return uniq.size === 1 || uniq.size === cards.length\n}\n\nexport function findSet(cards: CardItem[]): number[] {\n  for (let i = 0; i < cards.length; i++) {\n    if (!cards[i]) continue\n    for (let j = i + 1; j < cards.length; j++) {\n      if (!cards[j]) continue\n      for (let k = j + 1; k < cards.length; k++) {\n        if (!cards[k]) continue\n        if (checkIfSet([cards[i], cards[j], cards[k]])) {\n          return [i, j, k]\n        }\n      }\n    }\n  }\n  return []\n}\n\nfunction shuffle(array: any[]): any[] {\n  return array.sort(() => Math.random() - 0.5)\n}\n\nfunction addType(cards: any[], qualityName: string, qualityValues: any[]) {\n  return cards.map(card => {\n    return qualityValues.map(value => ({ ...card, ...{ [qualityName]: value } }))\n  }).flat(Infinity)\n}\n","import React from 'react'\nimport './Card.scss'\nimport { ICard } from '../utils/set-utils'\n\nexport interface ICardProps {\n  card: ICard,\n  isSelected: boolean,\n  onSelect: (p: boolean) => void\n  isHighlighted: boolean,\n  isRemoving: boolean,\n  style: any\n}\n\n\nexport const Card = ({ style,isRemoving, card, isSelected, onSelect, isHighlighted }: ICardProps) => {\n\n  const getElements = () => {\n    let elements = []\n    for (let i = 0; i < card.amount; i++) {\n      const className = ['item', card.color, card.shape, card.style].join(' ').toLowerCase()\n      elements.push(<div className={className} key={className + i}></div>)\n    }\n    return elements\n  }\n\n  const className = ['card ', (isSelected ? 'selected' : ''), (isHighlighted ? 'highlighted' : ''), (isRemoving ? 'removing' : '')].join(' ')\n\n  return (\n    <div className={className} onClick={() => onSelect(!isSelected)} style={style}>\n    {getElements()}\n  </div>)\n}\n","import { findSet, generateAllCards, ICard } from './set-utils'\n\nexport type CardItem = ICard | null\n\nexport const SET_SIZE = 3\nexport const MIN_BOARD_SIZE = 12\n\nclass Game {\n  allCards: ICard[] = []\n  playedCards: ICard[] = []\n  cardsOnTable: CardItem[] = []\n\n  nextSet: number[] = []\n\n  startGame() {\n    this.allCards = generateAllCards()\n    this.cardsOnTable = this.allCards.splice(0, MIN_BOARD_SIZE)\n\n    this.recalculateNextSet()\n\n    if (this.nextSet.length === 0) {\n      this.startGame()\n    }\n  }\n\n  get anyCardsLeft(): boolean {\n    return this.allCards.length > 0\n  }\n\n  replaceSelectedCards(selectedCards: number[]) {\n    this.removeSelectedCards(selectedCards)\n    this.replaceRemovedCardsWithNew()\n  }\n\n  removeSelectedCards(selectedCards: number[]) {\n    selectedCards.forEach((selectedIndex, i) => {\n      this.playedCards.push(this.cardsOnTable[selectedIndex] as ICard)\n      this.cardsOnTable.splice(selectedIndex, 1, null)\n    })\n\n    this.recalculateNextSet()\n  }\n\n  replaceRemovedCardsWithNew() {\n    if (!this.anyCardsLeft) {\n      return\n    }\n\n    if (this.cardsOnTable.length < MIN_BOARD_SIZE + SET_SIZE) {\n      this.drawCards(3)\n    }\n\n    while (this.nextSet.length === 0 && this.anyCardsLeft) {\n      this.drawCards(1)\n    }\n\n    this.cardsOnTable = this.cardsOnTable.filter(card => card !== null)\n  }\n\n  private drawCards(amount = 1) {\n    for (let i = 0; i < amount; i++) {\n      const newCard = this.allCards.splice(0, 1)[0]\n      const indexToReplace = this.cardsOnTable.indexOf(null)\n      if (indexToReplace > -1) {\n        this.cardsOnTable[indexToReplace] = newCard\n      } else {\n        this.cardsOnTable.push(newCard)\n      }\n    }\n\n    this.recalculateNextSet()\n  }\n\n  private recalculateNextSet() {\n    this.nextSet = findSet(this.cardsOnTable)\n    console.log(this.nextSet)\n\n  }\n}\n\nexport const GameUtils = new Game()","import Modal from 'react-awesome-modal'\nimport React from 'react'\nimport './RulesPopup.scss'\nexport const RulesPopup = ({ isModalVisible, setIsModalVisible }: any) => {\n  return (<Modal visible={isModalVisible}\n                 width=\"400\" height=\"300\" effect=\"fadeInDown\"\n                 onClickAway={() => setIsModalVisible(false)}>\n    <div className=\"popup\">\n      <h1>How to play</h1>\n      <p>This is an online version of SET game</p>\n      <p>You can find official rules <a href=\"https://www.ultraboardgames.com/set/game-rules.php\" target=\"_blank\" rel=\"noopener noreferrer\"> here</a></p>\n      <span className=\"close\" onClick={() => setIsModalVisible(false)}>X</span>\n    </div>\n  </Modal>)\n}","import React, { useEffect, useRef, useState } from 'react'\nimport { Card } from '../card/Card'\nimport './Game.scss'\nimport { checkIfSet } from '../utils/set-utils'\nimport { CardItem, GameUtils, MIN_BOARD_SIZE, SET_SIZE } from '../utils/game-utils'\nimport { RulesPopup } from './RulesPopup'\n\nconst TIMEOUT = 500\nconst HINT_TIMEOUT = 2000;\n\nconst CARD_HEIGHT = 180\nconst CARD_WIDTH = 130\n\nexport interface ICardView {\n  card: CardItem,\n  isSelected: boolean\n  isHinted: boolean\n  isRemoving?: boolean\n  isAppearing?: boolean\n}\n\nexport const Game = () => {\n  const [currentCards, setCurrentCards] = useState<ICardView[]>([])\n  const [gameOver, setGameOver] = useState<boolean>(false)\n  const [isModalVisible, setIsModalVisible] = useState<boolean>(false)\n\n  let hintRemovingTimeout = useRef<any>(null)\n\n  useEffect(() => {restartGame()}, [])\n  //useEffect(() => {console.log(currentCards)}, [currentCards])\n\n  useEffect(() => {\n    clearTimeout(hintRemovingTimeout.current)\n    const selectedCards = currentCards.filter((cardItem) => cardItem.isSelected && !cardItem.isRemoving)\n\n    const handleSet = () => {\n      setCurrentCards(currentCards.map(\n        (item, i) => ({ ...item, isRemoving: currentCards[i].isSelected })))\n\n      setTimeout(() => {\n        const selectedCardsIndexes = currentCards.map(\n          (cardItem, i) => cardItem.isSelected && !cardItem.isRemoving ? i : -1).filter(i => i > -1)\n\n        GameUtils.replaceSelectedCards(selectedCardsIndexes)\n\n        setCurrentCards(GameUtils.cardsOnTable.map((card, i) => ({\n          card,\n          isSelected: false,\n          isHinted: false,\n          isAppearing: selectedCardsIndexes.indexOf(i) > -1 || i >= currentCards.length\n        })))\n      }, TIMEOUT)\n    }\n\n    if (selectedCards.length === SET_SIZE) {\n      const isSet = checkIfSet(selectedCards.map(({ card }) => card))\n      console.log(isSet)\n      if (isSet) {\n        handleSet()\n      } else {\n        setTimeout(() => {\n          setCurrentCards(currentCards.map((item) => ({ ...item, isSelected: false })))\n        }, TIMEOUT)\n      }\n    }\n  }, [currentCards])\n\n  useEffect(() => {setGameOver(GameUtils.nextSet.length === 0)}, [currentCards])\n\n  const onCardSelect = (isSelected: boolean, cardIndex: number) => {\n    const updatedCards = currentCards.map(\n      (item, i) => ({ ...item, isSelected: i === cardIndex ? isSelected : item.isSelected, isHinted: false }))\n    setCurrentCards(updatedCards)\n  }\n\n\n  const hintSet = () => {\n    const setCards = GameUtils.nextSet\n    if (setCards.length) {\n      const updatedCards = currentCards.map((item, i) => ({ ...item, isHinted: setCards.indexOf(i) > -1 }))\n      setCurrentCards(updatedCards)\n    }\n\n    hintRemovingTimeout.current = setTimeout(\n      () => {\n        const updatedCards = currentCards.map((item) => ({ ...item, isHinted: false }))\n        setCurrentCards(updatedCards)\n      },\n      HINT_TIMEOUT)\n  }\n\n  const restartGame = () => {\n    GameUtils.startGame()\n    setCurrentCards(GameUtils.cardsOnTable.map(card => ({ card, isSelected: false, isHinted: false })))\n  }\n\n  const renderBoard = () => {\n    const shiftX = currentCards.length > MIN_BOARD_SIZE ? CARD_WIDTH / 2 : 0\n    return currentCards.map((item, index) => {\n\n      if (item.card === null) {\n        return <div key={index}></div>\n      }\n\n      const top = index < MIN_BOARD_SIZE ? Math.floor(index / 4) * CARD_HEIGHT : (index % MIN_BOARD_SIZE) * CARD_HEIGHT\n      const left = index < MIN_BOARD_SIZE ? (index % 4) * CARD_WIDTH : CARD_WIDTH * 4\n\n      const divStyle = {\n        top: top + 'px',\n        left: (left - shiftX) + 'px'\n      }\n\n      return (<Card key={index}\n                    card={item.card}\n                    style={divStyle}\n                    isRemoving={!!item.isRemoving}\n                    isSelected={item.isSelected}\n                    isHighlighted={item.isHinted}\n                    onSelect={(newStatus) => onCardSelect(newStatus, index)}/>)\n    })\n  }\n\n  return (\n    <div className=\"game\">\n      <div className=\"header\">\n        <div className=\"header-content\">\n          <h1>SET GAME</h1>\n          <div className=\"btn-container\">\n            <div className=\"info\">CARDS LEFT: {GameUtils.allCards.length}</div>\n            <button className=\"btn\" onClick={() => setIsModalVisible(true)}>HOW TO</button>\n            {!gameOver && <button onClick={hintSet} className=\"btn\">HELP ME!</button>}\n            {gameOver && <button onClick={restartGame} className=\"btn\">RESTART</button>}\n          </div>\n        </div>\n      </div>\n      <div className=\"cards-container\">\n        {renderBoard()}\n      </div>\n      {gameOver && (\n        <div className=\"gameOver-stamp\">\n          Game over\n        </div>)}\n      <RulesPopup isModalVisible={isModalVisible} setIsModalVisible={setIsModalVisible}/>\n\n    </div>\n  )\n}\n","import React from 'react'\nimport './App.scss'\nimport { Game } from './game/Game'\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n    <Game/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}